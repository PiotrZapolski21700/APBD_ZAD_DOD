// <auto-generated />
using System;
using EventManagementApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APDB_Kolokwium_template.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagementApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EventDate");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int")
                        .HasColumnName("MaxParticipants");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Największa konferencja .NET w Polsce",
                            EventDate = new DateTime(2025, 9, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 200,
                            Title = "Konferencja .NET 2025",
                            UpdatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Praktyczne warsztaty z chmury Azure",
                            EventDate = new DateTime(2025, 10, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxParticipants = 50,
                            Title = "Warsztaty Azure",
                            UpdatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EventManagementApi.Models.EventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId")
                        .HasColumnOrder(0);

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("ParticipantId")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CancellationDate");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit")
                        .HasColumnName("IsCancelled");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RegistrationDate");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("EventManagementApi.Models.EventSpeaker", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventId")
                        .HasColumnOrder(0);

                    b.Property<int>("SpeakerId")
                        .HasColumnType("int")
                        .HasColumnName("SpeakerId")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("AssignedAt");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventSpeakers");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            SpeakerId = 1,
                            AssignedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 1,
                            SpeakerId = 2,
                            AssignedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            EventId = 2,
                            SpeakerId = 2,
                            AssignedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EventManagementApi.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("EventManagementApi.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Bio");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Expert in .NET",
                            CreatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jan.kowalski@example.com",
                            FirstName = "Jan",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Cloud architect",
                            CreatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "anna.nowak@example.com",
                            FirstName = "Anna",
                            LastName = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "DevOps specialist",
                            CreatedAt = new DateTime(2024, 6, 22, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "piotr.wisniewski@example.com",
                            FirstName = "Piotr",
                            LastName = "Wiśniewski"
                        });
                });

            modelBuilder.Entity("EventManagementApi.Models.EventParticipant", b =>
                {
                    b.HasOne("EventManagementApi.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagementApi.Models.Participant", "Participant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EventManagementApi.Models.EventSpeaker", b =>
                {
                    b.HasOne("EventManagementApi.Models.Event", "Event")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventManagementApi.Models.Speaker", "Speaker")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("EventManagementApi.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");

                    b.Navigation("EventSpeakers");
                });

            modelBuilder.Entity("EventManagementApi.Models.Participant", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("EventManagementApi.Models.Speaker", b =>
                {
                    b.Navigation("EventSpeakers");
                });
#pragma warning restore 612, 618
        }
    }
}
