// <auto-generated />
using System;
using LibraryApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APDB_Kolokwium_template.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryApi.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Author");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Author = "Andrzej Sapkowski",
                            Title = "Wiedźmin"
                        },
                        new
                        {
                            Id = 102,
                            Author = "Stanisław Lem",
                            Title = "Solaris"
                        },
                        new
                        {
                            Id = 103,
                            Author = "Adam Mickiewicz",
                            Title = "Pan Tadeusz"
                        },
                        new
                        {
                            Id = 104,
                            Author = "Bolesław Prus",
                            Title = "Lalka"
                        },
                        new
                        {
                            Id = 105,
                            Author = "Antoine de Saint-Exupéry",
                            Title = "Mały Książę"
                        },
                        new
                        {
                            Id = 201,
                            Author = "J.K. Rowling",
                            Title = "Harry Potter i Kamień Filozoficzny"
                        },
                        new
                        {
                            Id = 205,
                            Author = "J.R.R. Tolkien",
                            Title = "Władca Pierścieni"
                        },
                        new
                        {
                            Id = 210,
                            Author = "George Orwell",
                            Title = "1984"
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.Loan", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID")
                        .HasColumnOrder(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LoanDate");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnDate");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            BookId = 101,
                            UserId = 1,
                            LoanDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 105,
                            UserId = 1,
                            LoanDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = 102,
                            UserId = 2,
                            LoanDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "anna.nowak@example.com",
                            Name = "Anna Nowak"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jan.kowalski@example.com",
                            Name = "Jan Kowalski"
                        },
                        new
                        {
                            Id = 3,
                            Email = "maria.wisniewska@example.com",
                            Name = "Maria Wiśniewska"
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.UserBookFavorite", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID")
                        .HasColumnOrder(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID")
                        .HasColumnOrder(1);

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBookFavorites");

                    b.HasData(
                        new
                        {
                            BookId = 101,
                            UserId = 1
                        },
                        new
                        {
                            BookId = 105,
                            UserId = 1
                        },
                        new
                        {
                            BookId = 102,
                            UserId = 2
                        },
                        new
                        {
                            BookId = 103,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LibraryApi.Models.Loan", b =>
                {
                    b.HasOne("LibraryApi.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApi.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApi.Models.UserBookFavorite", b =>
                {
                    b.HasOne("LibraryApi.Models.Book", "Book")
                        .WithMany("UserFavorites")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryApi.Models.User", "User")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryApi.Models.Book", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("UserFavorites");
                });

            modelBuilder.Entity("LibraryApi.Models.User", b =>
                {
                    b.Navigation("FavoriteBooks");

                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
